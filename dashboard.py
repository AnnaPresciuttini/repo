# -*- coding: utf-8 -*-
"""dashboard

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17XZr1EnkoFxb6Kne29VQMMtlqBp8EtG7
"""

# !pip install ipykernel
# !pip install -q streamlit
# import streamlit as st

# exit()

import streamlit as st
st.set_option('deprecation.showPyplotGlobalUse', False)

import plotly.express as px 
import plotly.figure_factory as ff
z = [[1, 1, 1, 1, -0.35,1, 0.02],
     [1, 1, 1, 1, -0.36,1, 0.03],
     [1, 1, 1, 1, -0.35,1, 0.02],
     [1, 1, 1, 1, -0.35,1, 0.03],
     [-0.35, -0.36, -0.35, -0.35, 1,-0.35, -0.1],
     [1, 1, 1, 1, -0.35,1, 0.03],
     [0.02, 0.03, 0.02, 0.03, -0.1, 0.03,1]]

x = ['high', 'low', 'open', 'close', 'volume', 'adjclose', 'weekly_returns']
y = ['high', 'low', 'open', 'close', 'volume', 'adjclose', 'weekly_returns']
# fig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z, colorscale='Viridis')
# fig.show()

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 

# data processing
import pandas as pd 
# data visualization
# import seaborn as sns
# %matplotlib inline
from matplotlib import pyplot as plt
# from matplotlib import style

st.title('Predicting weekly returns of the FTSE MIB Index')

st.sidebar.title("Select one of the feature to see the time series:")
select = st.sidebar.selectbox('Feature', ['Adjusted Closing Prices', 'Open', 'High','Volume', 'Low', 'Close', 'Weekly returns',], key='1')
st.sidebar.title("Select one of the feature to see the boxplot:")
select_2 = st.sidebar.selectbox('Feature', ['Adjusted Closing Prices', 'Open', 'High','Volume', 'Low', 'Close', 'Weekly returns',], key='2')


@st.cache
def load_data(nrows):
    data = pd.read_csv('dataset_streamlit.csv', nrows=nrows)
    return data


data_load_state = st.text('Loading data...')
data = load_data(5994)
st.dataframe(data.head(500))

if st.checkbox("Show dataset with selected columns"):
        # get the list of columns
        columns = data.columns.tolist()
        st.write("#### Which columns do you want to see?")
        selected_cols = st.multiselect("", columns)
        selected_data = data[selected_cols]
        st.dataframe(selected_data)
        
if st.checkbox("Show number of rows"):
        st.write('5994')
if st.checkbox("Show number of columns"):
        st.write('9')

# Show dataset description
if st.checkbox("Show description of dataset"):
        st.write(data.describe())
        
if st.checkbox("Show correlations"):
            st.write("### Heatmap")
            st.write(ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z, colorscale='Viridis'))

if st.checkbox("Show distribution of the features"):
            st.write("### Histograms")
            data[['high', 'low', 'open', 'close', 'volume', 'adjclose', 'weekly_returns']].hist(bins=15, figsize=(15, 6), layout=(2, 4), color='lightblue', grid=False)
            plt.show()
            st.pyplot()
 
if st.checkbox("Are weekly returns normally distributed?"):
            st.write("### Let's see...")
            fig = plt.figure()
            ax = fig.add_subplot(222)
            ax.set_xlim([-0.3, 0.2])
            data['weekly_returns'].hist(ax= ax,bins=190, color='cadetblue')
            ax1 = ax.twinx()
#             plt.title("Weekly returns distribution")
            data['weekly_returns'].plot(kind="kde", color='steelblue', ax=ax1, legend=False )
            plt.show()
            st.pyplot()
#             data[['high', 'low', 'open', 'close', 'volume', 'adjclose', 'weekly_returns']].hist(bins=15, figsize=(15, 6), layout=(2, 4), color='lightblue', grid=False)
#             plt.show()
#             st.pyplot()
            


data_ = data.rename(columns={'Date':'index'}).set_index('index')

# x = st.slider('Select the year range',1999, 2020, (1999, 2020))
# st.line_chart(data_.adjclose)





if not st.sidebar.checkbox("Hide", True, key='1'):
    if select == 'Adjusted Closing Prices':
        data_= data_.loc[data['Date'] >= '1999-1-01']
        data_.plot(x='Date', y= 'adjclose')
        plt.xlabel("Date")
        plt.ylabel( 'Adjusted Closing prices')
        plt.title( 'Italian adjusted closing prices history')
        plt.legend().set_visible(False)
        plt.show()
        st.pyplot()
        
    if select == 'Open':
        st.line_chart(data_.open)
    if select == 'High':
        st.line_chart(data_.high)
    if select == 'Low':
        st.line_chart(data_.low)
    if select == 'Close':
        st.line_chart(data_.close)
    if select == 'Volume':
        st.line_chart(data_.volume)
    if select == 'Weekly returns':
        st.line_chart(data_.weekly_returns)   


#     if select_2 == 'High':
#          st.write(seaborn.boxplot(data.high)
#     if select_2 == 'Low':
#          st.write(seaborn.boxplot(data.low)
#     if select_2 == 'Close':
#          st.write(seaborn.boxplot(data.close)
#     if select_2 == 'Volume':
#          st.write(seaborn.boxplot(data.volume)
#     if select_2 == 'Weekly returns':
#          st.write(seaborn.boxplot(data.weekly_returns)
    
    
    
        

 
        








